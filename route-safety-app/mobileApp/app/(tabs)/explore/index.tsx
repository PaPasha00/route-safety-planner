import { View, Text, ScrollView, SafeAreaView } from "react-native";
import { getAnalysisResult } from "../../../store/analysisStore";
import { styles } from "./styles";

export default function ExploreScreen() {
  const data = getAnalysisResult();

  if (!data) {
    return (
      <View style={styles.container}>
        <Text style={styles.note}>
          –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞. –ü–æ—Å—Ç—Ä–æ–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –ò–ò.
        </Text>
      </View>
    );
  }

  const structured = data.analysisStructured;

  return (
    <SafeAreaView style={styles.safeArea}>
      <ScrollView
        style={styles.scrollView}
        showsVerticalScrollIndicator={false}
      >
        <View style={styles.container}>
          {/* –ï—Å–ª–∏ –ø—Ä–∏—à—ë–ª —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ */}
          {structured ? (
            <>
              {/* –†–µ–∑—é–º–µ */}
              <View style={styles.card}>
                <Text style={styles.cardTitle}>üß† –†–µ–∑—é–º–µ</Text>
                <Text style={styles.cardText}>
                  –°–ª–æ–∂–Ω–æ—Å—Ç—å: {structured.summary?.difficultyScore ?? "‚Äî"}/10
                </Text>
                {structured.summary?.difficultyReasoning && (
                  <Text style={styles.cardText}>
                    {structured.summary.difficultyReasoning}
                  </Text>
                )}
              </View>

              {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
              <View style={styles.card}>
                <Text style={styles.cardTitle}>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</Text>
                <View style={styles.statsGrid}>
                  {typeof structured.stats?.distanceKm === "number" && (
                    <View style={styles.statItem}>
                      <Text style={styles.statValue}>
                        {structured.stats.distanceKm}–∫–º
                      </Text>
                      <Text style={styles.statLabel}>–î–∏—Å—Ç–∞–Ω—Ü–∏—è</Text>
                    </View>
                  )}
                  {typeof structured.stats?.elevationGainM === "number" && (
                    <View style={styles.statItem}>
                      <Text style={styles.statValue}>
                        {structured.stats.elevationGainM}–º
                      </Text>
                      <Text style={styles.statLabel}>–ù–∞–±–æ—Ä</Text>
                    </View>
                  )}
                  {typeof structured.stats?.avgSlopePercent === "number" && (
                    <View style={styles.statItem}>
                      <Text style={styles.statValue}>
                        {structured.stats.avgSlopePercent.toFixed(1)}%
                      </Text>
                      <Text style={styles.statLabel}>–°—Ä–µ–¥–Ω–∏–π —É–∫–ª–æ–Ω</Text>
                    </View>
                  )}
                  {typeof structured.stats?.maxSlopePercent === "number" && (
                    <View style={styles.statItem}>
                      <Text style={styles.statValue}>
                        {structured.stats.maxSlopePercent.toFixed(1)}%
                      </Text>
                      <Text style={styles.statLabel}>–ú–∞–∫—Å. —É–∫–ª–æ–Ω</Text>
                    </View>
                  )}
                </View>
              </View>

              {/* –ì–µ–æ–≥—Ä–∞—Ñ–∏—è */}
              {(structured.geography ||
                data.terrainType ||
                data.formattedGeoContext) && (
                <View style={styles.card}>
                  <Text style={styles.cardTitle}>üó∫Ô∏è –ì–µ–æ–≥—Ä–∞—Ñ–∏—è</Text>
                  {structured.geography?.terrainType && (
                    <View style={styles.chipContainer}>
                      <View style={styles.chip}>
                        <Text style={styles.chipText}>
                          {structured.geography.terrainType}
                        </Text>
                      </View>
                    </View>
                  )}
                  {Array.isArray(structured.geography?.regions) &&
                    structured.geography.regions.length > 0 && (
                      <Text style={styles.cardText}>
                        –†–µ–≥–∏–æ–Ω—ã: {structured.geography.regions.join(", ")}
                      </Text>
                    )}
                  {data.formattedGeoContext && (
                    <Text style={styles.cardText}>
                      {data.formattedGeoContext}
                    </Text>
                  )}
                  {structured.geography?.notes && (
                    <Text style={styles.cardText}>
                      {structured.geography.notes}
                    </Text>
                  )}
                </View>
              )}

              {/* –ü–æ –¥–Ω—è–º */}
              {Array.isArray(structured.days) && structured.days.length > 0 && (
                <View style={styles.card}>
                  <Text style={styles.cardTitle}>üõ£Ô∏è –ü–æ –¥–Ω—è–º</Text>
                  {structured.days.map((d: any, i: number) => (
                    <View key={i} style={styles.dayContainer}>
                      <Text style={styles.dayTitle}>
                        –î–µ–Ω—å {d.day ?? i + 1} {d.date ? `(${d.date})` : ""}
                      </Text>
                      <View style={styles.dayStats}>
                        {typeof d.distanceKm === "number" && (
                          <Text style={styles.dayStat}>
                            üìè {d.distanceKm} –∫–º
                          </Text>
                        )}
                        {typeof d.elevationGainM === "number" && (
                          <Text style={styles.dayStat}>
                            ‚¨ÜÔ∏è {d.elevationGainM} –º
                          </Text>
                        )}
                      </View>
                      {d.weather && (
                        <Text style={styles.cardText}>
                          –ü–æ–≥–æ–¥–∞: {d.weather.temperatureMin}¬∞‚Äì
                          {d.weather.temperatureMax}¬∞, {d.weather.conditions},
                          –≤–µ—Ç–µ—Ä {d.weather.windSpeed} –º/—Å, –æ—Å–∞–¥–∫–∏{" "}
                          {d.weather.precipitation} –º–º
                        </Text>
                      )}
                      {Array.isArray(d.keyPoints) && d.keyPoints.length > 0 && (
                        <Text style={styles.cardText}>
                          –ö–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏: {d.keyPoints.join(", ")}
                        </Text>
                      )}
                      {d.description && (
                        <Text style={styles.dayDescription}>
                          {d.description}
                        </Text>
                      )}
                      {Array.isArray(d.recommendations) &&
                        d.recommendations.length > 0 && (
                          <Text style={styles.cardText}>
                            –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {d.recommendations.join(", ")}
                          </Text>
                        )}
                    </View>
                  ))}
                </View>
              )}

              {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è */}
              {Array.isArray(structured.recommendations) &&
                structured.recommendations.length > 0 && (
                  <View style={styles.card}>
                    <Text style={styles.cardTitle}>üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</Text>
                    {structured.recommendations.map((r: string, i: number) => (
                      <Text key={i} style={styles.recommendationItem}>
                        ‚Ä¢ {r}
                      </Text>
                    ))}
                  </View>
                )}

              {Array.isArray(structured.warnings) &&
                structured.warnings.length > 0 && (
                  <View style={[styles.card, styles.warningCard]}>
                    <Text style={styles.warningTitle}>‚ö†Ô∏è –í–∞–∂–Ω–æ –∑–Ω–∞—Ç—å</Text>
                    {structured.warnings.map((w: string, i: number) => (
                      <Text key={i} style={styles.warningText}>
                        ‚Ä¢ {w}
                      </Text>
                    ))}
                  </View>
                )}
            </>
          ) : (
            // –§–æ–ª–ª–±—ç–∫: –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞, –µ—Å–ª–∏ JSON –Ω–µ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª—Å—è
            <View style={styles.card}>
              <Text style={styles.cardTitle}>üß† –†–µ–∑—é–º–µ –ò–ò</Text>
              <Text style={styles.cardText}>{data.analysis}</Text>
            </View>
          )}
        </View>
      </ScrollView>
    </SafeAreaView>
  );
}
