import axios from 'axios';
import { RouteAnalysisRequest, RouteGeometryAnalysis, GeographicContext } from '../types';

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –ò–ò –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
 */
export function generateAnalysisPrompt(
  request: RouteAnalysisRequest,
  terrainType: string,
  geographicContext: GeographicContext,
  formattedGeoContext: string,
  routeAnalysis: RouteGeometryAnalysis
): string {
  const startDate = new Date(request.startDate);
  const endDate = new Date(request.endDate);
  const totalDays = Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24)) + 1;

  const jsonSchema = {
    summary: {
      difficultyScore: "number (1-10)",
      difficultyReasoning: "string",
    },
    stats: {
      distanceKm: "number",
      elevationGainM: "number",
      minElevationM: "number",
      maxElevationM: "number",
      avgSlopePercent: "number",
      maxSlopePercent: "number",
      sinuosity: "number",
    },
    geography: {
      terrainType: "string",
      countries: "string[]",
      regions: "string[]",
      areas: "string[]",
      localities: "string[]",
      notes: "string",
    },
    days: [
      {
        day: "number",
        date: "string",
        distanceKm: "number",
        elevationGainM: "number",
        keyPoints: "string[]",
        weather: {
          temperatureMin: "number",
          temperatureMax: "number",
          conditions: "string",
          windSpeed: "number",
          precipitation: "number",
        },
        description: "string",
        recommendations: "string[]",
      },
    ],
    recommendations: "string[]",
    warnings: "string[]",
  };

  return `
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–æ—Ö–æ–¥–∞–º. –í–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ JSON –±–µ–∑ –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ —Ç–µ–∫—Å—Ç–∞ –¥–æ –∏–ª–∏ –ø–æ—Å–ª–µ JSON. –ù–∏–∫–∞–∫–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏–ª–∏ –º–∞—Ä–∫–¥–∞—É–Ω–∞. –ï—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö ‚Äî —Å—Ç–∞–≤—å null –∏–ª–∏ –ø—É—Å—Ç—ã–µ –ø–æ–ª—è, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–π —Ñ–æ—Ä–º—É.

–°—Ö–µ–º–∞ JSON (–ø—Ä–∏–º–µ—Ä —Ç–∏–ø–æ–≤):
${JSON.stringify(jsonSchema, null, 2)}

–î–ê–ù–ù–´–ï:
- –ì–µ–æ–∫–æ–Ω—Ç–µ–∫—Å—Ç (—Å—Ç—Ä–æ–∫–∞):\n${formattedGeoContext}
- –ú—É–ª—å—Ç–∏-—Ä–µ–≥–∏–æ–Ω: ${geographicContext.multiRegion}
- –ú—É–ª—å—Ç–∏-—Å—Ç—Ä–∞–Ω–∞: ${geographicContext.multiCountry}
- –ü—Ä–æ—Ç—è–∂–µ–Ω–Ω–æ—Å—Ç—å: ${request.lengthKm} –∫–º
- –ù–∞–±–æ—Ä –≤—ã—Å–æ—Ç—ã: ${request.elevationGain} –º
- –¢–∏–ø –º–µ—Å—Ç–Ω–æ—Å—Ç–∏: ${terrainType}
- –¢–æ—á–µ–∫: ${request.coordinates.length}
- –¢–∏–ø —Ç—É—Ä–∏–∑–º–∞: ${request.tourismType}
- –î–∞—Ç—ã: ${request.startDate} - ${request.endDate} (${totalDays} –¥–Ω.)
- –£–∫–ª–æ–Ω —Å—Ä: ${routeAnalysis.avgSlope.toFixed(1)}%, –º–∞–∫—Å: ${routeAnalysis.maxSlope.toFixed(1)}%
- –ò–∑–≤–∏–ª–∏—Å—Ç–æ—Å—Ç—å: ${routeAnalysis.sinuosity.toFixed(2)}
- –í—ã—Å–æ—Ç—ã: –º–∏–Ω ${routeAnalysis.minElevation}–º, –º–∞–∫—Å ${routeAnalysis.maxElevation}–º, –ø–µ—Ä–µ–ø–∞–¥ ${routeAnalysis.maxElevation - routeAnalysis.minElevation}–º

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ö–µ–º–µ.
  `;
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –ò–ò –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç { text, json? }
 */
export async function analyzeRouteWithAI(prompt: string): Promise<{ text: string; json?: any }> {
  try {
    if (!process.env.OPENROUTER_API_KEY) {
      throw new Error('OPENROUTER_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –≤–∞—à–∏–º API –∫–ª—é—á–æ–º');
    }

    const model = process.env.OPENROUTER_MODEL || 'openai/gpt-4o-mini';
    console.log('ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò... (model:', model, ')');

    const response = await axios.post(
      'https://openrouter.ai/api/v1/chat/completions',
      {
        model,
        messages: [
          { role: 'system', content: '–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON. –ù–∏–∫–∞–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤–Ω–µ JSON.' },
          { role: 'user', content: prompt },
        ],
        max_tokens: 4000,
        temperature: 0.4,
        response_format: { type: 'json_object' },
      },
      {
        headers: {
          'Authorization': `Bearer ${process.env.OPENROUTER_API_KEY}`,
          'HTTP-Referer': 'http://localhost:5173',
          'X-Title': 'Route Safety Planner'
        }
      }
    );

    const content: string = response.data.choices[0].message.content?.trim() || '';

    let parsed: any | undefined = undefined;
    try {
      parsed = JSON.parse(content);
    } catch {
      // –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –≤–µ—Ä–Ω—É–ª—Å—è –Ω–µ—Å—Ç—Ä–æ–≥–∏–π JSON
      parsed = undefined;
    }

    console.log('‚úÖ –û—Ç–≤–µ—Ç –ò–ò –ø–æ–ª—É—á–µ–Ω');
    return { text: content, json: parsed };
  } catch (error: any) {
    const status = error?.response?.status;
    const data = error?.response?.data;
    if (status) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò:', status, typeof data === 'string' ? data : JSON.stringify(data));
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò:', (error as Error).message);
    }
    if (error?.response) throw error;
    if (status === 401) {
      throw new Error('API –∫–ª—é—á OpenRouter –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π. –°–º. API_SETUP.md –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
    }
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –æ—Ç –ò–ò');
  }
}
