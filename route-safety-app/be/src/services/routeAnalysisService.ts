import { RouteAnalysisRequest, RouteAnalysisResponse } from '../types';
import { determineTerrainType, getGeographicContext, formatGeographicContext } from '../helpers/geography';
import { analyzeRouteGeometry } from '../helpers/routeAnalysis';
import { generateAnalysisPrompt, analyzeRouteWithAI } from '../helpers/aiAnalysis';
import { ElevationService } from './elevationService';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤
 */
export class RouteAnalysisService {
  private elevationService = new ElevationService();

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–∞—Ä—à—Ä—É—Ç–∞ –±–µ–∑ –ª—é–±—ã—Ö –∑–∞–≥–ª—É—à–µ–∫/—Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏
   */
  async analyzeRoute(request: RouteAnalysisRequest): Promise<RouteAnalysisResponse> {
    try {
      console.log('üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ä—à—Ä—É—Ç–∞:');
      console.log(`- –î–ª–∏–Ω–∞: ${request.lengthKm} –∫–º (${request.lengthMeters} –º)`);
      console.log(`- –ù–∞–±–æ—Ä –≤—ã—Å–æ—Ç—ã (–∏–∑ –∑–∞–ø—Ä–æ—Å–∞): ${request.elevationGain} –º`);
      console.log(`- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫: ${request.coordinates?.length || 0}`);
      console.log(`- elevationData: len=${request.elevationData?.length ?? 0}`);

      if (!request.coordinates || request.coordinates.length < 2) {
        throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞ (coordinates < 2)');
      }

      // –ê–≤—Ç–æ–ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–µ –≤—ã—Å–æ—Ç, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
      let elevationData = Array.isArray(request.elevationData) ? request.elevationData : [];
      const coordsLen = request.coordinates.length;
      const needFetch = elevationData.length !== coordsLen;
      if (needFetch) {
        console.log('üîÑ elevationData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—ã –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º...');
        const elevResp = await this.elevationService.getElevationData({ coordinates: request.coordinates });
        const results = elevResp.results || [];
        elevationData = results.map(r => Number(r.elevation) || 0);
        if (elevationData.length !== coordsLen) {
          throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤—ã—Å–æ—Ç—ã: ${elevationData.length} –Ω–∞ ${coordsLen}`);
        }
      }

      // –ü–µ—Ä–µ—Å—á—ë—Ç –Ω–∞–±–æ—Ä–∞ –≤—ã—Å–æ—Ç—ã –ø–æ —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ—Ñ–∏–ª—é
      const elevationGain = this.computeElevationGain(elevationData);
      console.log(`- –ü–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –≤—ã—Å–æ—Ç—ã: ${elevationGain} –º`);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ—Å—Ç–Ω–æ—Å—Ç–∏ –ø–æ —Ä–µ–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º —Ä–µ–ª—å–µ—Ñ–∞
      const terrainType = determineTerrainType(request.coordinates, elevationData);
      console.log(`- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø –º–µ—Å—Ç–Ω–æ—Å—Ç–∏: ${terrainType}`);

      // –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ —Ä–µ–∞–ª—å–Ω—ã–º —Ç–æ—á–∫–∞–º (Nominatim)
      const geographicContext = await getGeographicContext(request.coordinates);
      console.log('- –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–±—Ä–∞–Ω', {
        countries: geographicContext.countries.length,
        regions: geographicContext.regions.length,
        areas: geographicContext.areas.length,
        localities: geographicContext.localities.length,
      });
      const formattedGeoContext = formatGeographicContext(geographicContext);

      // –ê–Ω–∞–ª–∏–∑ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –ø–æ —Ä–µ–∞–ª—å–Ω—ã–º –≤—ã—Å–æ—Ç–∞–º
      const routeAnalysis = analyzeRouteGeometry(request.coordinates, elevationData);
      console.log('- –ì–µ–æ–º–µ—Ç—Ä–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞');

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ –∏ –∑–∞–ø—Ä–æ—Å –∫ –ò–ò (JSON-–æ—Ç–≤–µ—Ç)
      const prompt = generateAnalysisPrompt(
        { ...request, elevationData, elevationGain },
        terrainType,
        geographicContext,
        formattedGeoContext,
        routeAnalysis
      );
      console.log('ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò...');
      const ai = await analyzeRouteWithAI(prompt);
      console.log('‚úÖ –û—Ç–≤–µ—Ç –ò–ò –ø–æ–ª—É—á–µ–Ω');

      return {
        analysis: ai.text,
        analysisStructured: ai.json,
        stats: routeAnalysis,
        terrainType,
        geographicContext,
        formattedGeoContext,
        dailyRoutes: [],
        totalDays: 0,
      };
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ä—à—Ä—É—Ç–∞ (service):', error?.message || error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç');
    }
  }

  private computeElevationGain(elevations: number[]): number {
    let gain = 0;
    for (let i = 1; i < elevations.length; i++) {
      const delta = elevations[i] - elevations[i - 1];
      if (delta > 0) gain += delta;
    }
    return Math.round(gain);
  }
}
