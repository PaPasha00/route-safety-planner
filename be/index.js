const express = require('express');
const cors = require('cors');
const axios = require('axios');
require('dotenv').config();

// –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
function calculateDistance(lat1, lon1, lat2, lon2) {
  const R = 6371000; // —Ä–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
  const dLat = (lat2 - lat1) * Math.PI / 180;
  const dLon = (lon2 - lon1) * Math.PI / 180;
  const a = 
    Math.sin(dLat/2) * Math.sin(dLat/2) +
    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * 
    Math.sin(dLon/2) * Math.sin(dLon/2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  return R * c;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ –≤—ã—Å–æ—Ç
function determineTerrainType(coordinates, elevationData) {
  if (!coordinates || !elevationData || coordinates.length < 2) {
    return '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  }

  const minElevation = Math.min(...elevationData);
  const maxElevation = Math.max(...elevationData);
  const elevationRange = maxElevation - minElevation;
  const avgElevation = elevationData.reduce((sum, elev) => sum + elev, 0) / elevationData.length;

  let totalSlope = 0;
  let maxSlope = 0;
  
  for (let i = 1; i < coordinates.length; i++) {
    const prev = coordinates[i - 1];
    const curr = coordinates[i];
    const distance = calculateDistance(prev[0], prev[1], curr[0], curr[1]);
    
    if (distance > 0 && i < elevationData.length) {
      const elevationDiff = elevationData[i] - elevationData[i - 1];
      const slope = (elevationDiff / distance) * 100;
      totalSlope += Math.abs(slope);
      maxSlope = Math.max(maxSlope, Math.abs(slope));
    }
  }

  const avgSlope = totalSlope / (coordinates.length - 1);

  if (elevationRange > 1000) {
    return '–≥–æ—Ä–Ω–∞—è –º–µ—Å—Ç–Ω–æ—Å—Ç—å';
  } else if (elevationRange > 500) {
    return '—Ö–æ–ª–º–∏—Å—Ç–∞—è –º–µ—Å—Ç–Ω–æ—Å—Ç—å';
  } else if (elevationRange > 200) {
    return '–ø–µ—Ä–µ—Å–µ—á–µ–Ω–Ω–∞—è –º–µ—Å—Ç–Ω–æ—Å—Ç—å';
  } else if (avgSlope > 8) {
    return '–≤–æ–ª–Ω–∏—Å—Ç–∞—è —Ä–∞–≤–Ω–∏–Ω–∞';
  } else if (avgElevation < 50) {
    return '–Ω–∏–∑–º–µ–Ω–Ω–æ—Å—Ç—å';
  } else if (avgElevation > 500) {
    return '–≤–æ–∑–≤—ã—à–µ–Ω–Ω–æ—Å—Ç—å';
  } else {
    return '—Ä–∞–≤–Ω–∏–Ω–Ω–∞—è –º–µ—Å—Ç–Ω–æ—Å—Ç—å';
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ –≤—Å–µ–º —Ç–æ—á–∫–∞–º –º–∞—Ä—à—Ä—É—Ç–∞
async function getGeographicContext(coordinates) {
  try {
    // –í—ã–±–∏—Ä–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö —Ç–æ—á–µ–∫ –≤–¥–æ–ª—å –º–∞—Ä—à—Ä—É—Ç–∞
    const samplePoints = [];
    const step = Math.max(1, Math.floor(coordinates.length / 5)); // –ë–µ—Ä–µ–º 5 —Ç–æ—á–µ–∫ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ
    
    for (let i = 0; i < coordinates.length; i += step) {
      if (samplePoints.length < 5) { // –ú–∞–∫—Å–∏–º—É–º 5 —Ç–æ—á–µ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        samplePoints.push(coordinates[i]);
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∏ –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫–∏
    if (coordinates.length > 0) {
      samplePoints.push(coordinates[0]);
      samplePoints.push(coordinates[coordinates.length - 1]);
    }

    const uniquePoints = Array.from(new Set(samplePoints.map(p => p.join(','))))
      .map(str => str.split(',').map(Number));

    console.log(`üåç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ${uniquePoints.length} —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤`);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ç–æ—á–∫—É
    const locationPromises = uniquePoints.map(async (point, index) => {
      try {
        await new Promise(resolve => setTimeout(resolve, index * 200)); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        const response = await axios.get(
          `https://nominatim.openstreetmap.org/reverse?format=json&lat=${point[0]}&lon=${point[1]}&zoom=8&accept-language=ru`,
          {
            headers: {
              'User-Agent': 'RouteSafetyPlanner/1.0'
            }
          }
        );

        const data = response.data;
        if (data && data.address) {
          return {
            point: point,
            country: data.address.country || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            region: data.address.state || data.address.region || data.address.province || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            area: data.address.county || data.address.district || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            locality: data.address.city || data.address.town || data.address.village || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            type: data.addresstype || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
          };
        }
      } catch (error) {
        console.log(`–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ—á–∫–∏ ${index}:`, error.message);
      }
      return null;
    });

    const locations = (await Promise.all(locationPromises)).filter(loc => loc !== null);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –≤—Å–µ–º —Ç–æ—á–∫–∞–º
    const countries = new Set();
    const regions = new Set();
    const areas = new Set();
    const localities = new Set();

    locations.forEach(loc => {
      if (loc.country !== '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') countries.add(loc.country);
      if (loc.region !== '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') regions.add(loc.region);
      if (loc.area !== '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') areas.add(loc.area);
      if (loc.locality !== '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') localities.add(loc.locality);
    });

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø—Ä–æ—Ö–æ–¥–∏—Ç –ª–∏ –º–∞—Ä—à—Ä—É—Ç —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–≥–∏–æ–Ω–æ–≤
    const multiRegion = regions.size > 1;
    const multiCountry = countries.size > 1;

    return {
      countries: Array.from(countries),
      regions: Array.from(regions),
      areas: Array.from(areas),
      localities: Array.from(localities),
      multiRegion: multiRegion,
      multiCountry: multiCountry,
      totalPointsAnalyzed: locations.length
    };

  } catch (error) {
    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:', error.message);
    return {
      countries: ['–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'],
      regions: ['–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'],
      areas: ['–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'],
      localities: ['–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'],
      multiRegion: false,
      multiCountry: false,
      totalPointsAnalyzed: 0
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–∏–¥
function formatGeographicContext(context) {
  if (context.countries[0] === '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') {
    return '–≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ';
  }

  let description = '';

  if (context.multiCountry) {
    description = `–ú–∞—Ä—à—Ä—É—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω: ${context.countries.join(', ')}. `;
  } else {
    description = `–°—Ç—Ä–∞–Ω–∞: ${context.countries[0]}. `;
  }

  if (context.multiRegion) {
    description += `–ü—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ —Ä–µ–≥–∏–æ–Ω—ã: ${context.regions.join(', ')}. `;
  } else if (context.regions.length > 0) {
    description += `–†–µ–≥–∏–æ–Ω: ${context.regions[0]}. `;
  }

  if (context.areas.length > 0) {
    description += `–†–∞–π–æ–Ω—ã: ${context.areas.join(', ')}. `;
  }

  if (context.localities.length > 0) {
    if (context.localities.length > 3) {
      description += `–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã: ${context.localities.slice(0, 3).join(', ')} –∏ –µ—â–µ ${context.localities.length - 3}. `;
    } else {
      description += `–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã: ${context.localities.join(', ')}. `;
    }
  }

  return description;
}

const app = express();
app.use(cors());
app.use(express.json());

app.post('/api/elevation', async (req, res) => {
  try {
    const { coordinates } = req.body;
    
    if (!coordinates || !Array.isArray(coordinates)) {
      return res.status(400).json({ error: 'Invalid coordinates format' });
    }

    const locations = coordinates.map(coord => `${coord[1]},${coord[0]}`).join('|');
    
    const response = await fetch(
      `https://api.opentopodata.org/v1/srtm90m?locations=${locations}`
    );

    if (!response.ok) {
      throw new Error(`OpenTopoData API error: ${response.status}`);
    }

    const data = await response.json();
    res.json(data);
    
  } catch (error) {
    console.error('Elevation API error:', error);
    res.status(500).json({ error: 'Failed to fetch elevation data' });
  }
});

app.post('/api/analyze-route', async (req, res) => {
  try {
    const { lengthKm, elevationGain, coordinates, elevationData, lengthMeters } = req.body;

    console.log('üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ä—à—Ä—É—Ç–∞:');
    console.log(`- –î–ª–∏–Ω–∞: ${lengthKm} –∫–º (${lengthMeters} –º)`);
    console.log(`- –ù–∞–±–æ—Ä –≤—ã—Å–æ—Ç—ã: ${elevationGain} –º`);
    console.log(`- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫: ${coordinates?.length || 0}`);

    if (elevationData && elevationData.length > 0) {
      console.log('- –î–∏–∞–ø–∞–∑–æ–Ω –≤—ã—Å–æ—Ç:', Math.min(...elevationData), '-', Math.max(...elevationData), '–º');
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ—Å—Ç–Ω–æ—Å—Ç–∏
    const terrainType = determineTerrainType(coordinates, elevationData);
    console.log(`- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø –º–µ—Å—Ç–Ω–æ—Å—Ç–∏: ${terrainType}`);

    // –ü–æ–ª—É—á–∞–µ–º –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ –≤—Å–µ–º —Ç–æ—á–∫–∞–º
    const geographicContext = await getGeographicContext(coordinates);
    console.log('- –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:', geographicContext);

    const formattedGeoContext = formatGeographicContext(geographicContext);
    console.log('- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:', formattedGeoContext);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –º–∞—Ä—à—Ä—É—Ç–∞
    const routeAnalysis = analyzeRouteGeometry(coordinates, elevationData);
    
    const prompt = `
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Ä—à—Ä—É—Ç –∏ –¥–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—É—é –æ—Ü–µ–Ω–∫—É —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö:

–ì–ï–û–ì–†–ê–§–ò–ß–ï–°–ö–ò–ô –ö–û–ù–¢–ï–ö–°–¢:
${formattedGeoContext}
${geographicContext.multiRegion ? '–ú–ê–†–®–†–£–¢ –ü–†–û–•–û–î–ò–¢ –ß–ï–†–ï–ó –ù–ï–°–ö–û–õ–¨–ö–û –†–ï–ì–ò–û–ù–û–í - –£–ß–¢–ò –≠–¢–û –ü–†–ò –ê–ù–ê–õ–ò–ó–ï!' : ''}
${geographicContext.multiCountry ? '–ú–ê–†–®–†–£–¢ –ü–†–û–•–û–î–ò–¢ –ß–ï–†–ï–ó –ù–ï–°–ö–û–õ–¨–ö–û –°–¢–†–ê–ù - –û–°–û–ë–û–ï –í–ù–ò–ú–ê–ù–ò–ï –ù–ê –ì–†–ê–ù–ò–¶–´ –ò –†–ê–ó–õ–ò–ß–ò–Ø –í –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–ï!' : ''}

–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ü–ê–†–ê–ú–ï–¢–†–´ –ú–ê–†–®–†–£–¢–ê:
- –ü—Ä–æ—Ç—è–∂–µ–Ω–Ω–æ—Å—Ç—å: ${lengthKm} –∫–º
- –û–±—â–∏–π –Ω–∞–±–æ—Ä –≤—ã—Å–æ—Ç—ã: ${elevationGain} –º–µ—Ç—Ä–æ–≤
- –¢–∏–ø –º–µ—Å—Ç–Ω–æ—Å—Ç–∏: ${terrainType} (–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ —Ä–µ–ª—å–µ—Ñ—É)
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞: ${coordinates.length}

–ê–ù–ê–õ–ò–ó –†–ï–õ–¨–ï–§–ê:
- –°—Ä–µ–¥–Ω–∏–π —É–∫–ª–æ–Ω: ${routeAnalysis.avgSlope.toFixed(1)}%
- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–∫–ª–æ–Ω: ${routeAnalysis.maxSlope.toFixed(1)}%
- –ö—Ä—É—Ç—ã—Ö –ø–æ–¥—ä–µ–º–æ–≤ (>15%): ${routeAnalysis.steepSections} —É—á–∞—Å—Ç–∫–æ–≤
- –û–±—â–∞—è –∏–∑–≤–∏–ª–∏—Å—Ç–æ—Å—Ç—å: ${routeAnalysis.sinuosity.toFixed(2)}
- –í—ã—Å–æ—Ç–∞ –Ω–∞–¥ —É—Ä–æ–≤–Ω–µ–º –º–æ—Ä—è: –æ—Ç ${routeAnalysis.minElevation}–º –¥–æ ${routeAnalysis.maxElevation}–º
- –ü–µ—Ä–µ–ø–∞–¥ –≤—ã—Å–æ—Ç: ${routeAnalysis.maxElevation - routeAnalysis.minElevation}–º

–î–ê–ù–ù–´–ï –û –í–´–°–û–¢–ê–• (–ø–µ—Ä–≤—ã–µ 10 —Ç–æ—á–µ–∫ –∏–∑ ${elevationData.length}):
${elevationData.slice(0, 10).map((elev, i) => `  ${i+1}. ${elev}–º`).join('\n')}

–ü–†–û–§–ò–õ–¨ –ú–ê–†–®–†–£–¢–ê: ${routeAnalysis.elevationProfile}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –º–∞—Ä—à—Ä—É—Ç –∏ –¥–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, —É—á–∏—Ç—ã–≤–∞—è —á—Ç–æ –º–∞—Ä—à—Ä—É—Ç –º–æ–∂–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∑–æ–Ω—ã:

1. –ì–ï–û–ì–†–ê–§–ò–ß–ï–°–ö–ê–Ø –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ê
- –û–ø–∏—à–∏ –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã/—Å—Ç—Ä–∞–Ω—ã —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –º–∞—Ä—à—Ä—É—Ç
- –•–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ–ª—å–µ—Ñ–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–∫–∞
- –ö–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–æ–Ω—ã –≤–¥–æ–ª—å –º–∞—Ä—à—Ä—É—Ç–∞

2. –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê –°–õ–û–ñ–ù–û–°–¢–ò (–ø–æ —à–∫–∞–ª–µ 1-10)
- –û–±–æ—Å–Ω—É–π –æ—Ü–µ–Ω–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–∞—Ä—à—Ä—É—Ç–∞
- –£–∫–∞–∂–∏ —Ä–∞–∑–ª–∏—á–∏—è –≤ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —É—á–∞—Å—Ç–∫–∞—Ö
- –°—Ä–∞–≤–Ω–∏ —Å –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏ –≤ —ç—Ç–∏—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö

3. –¢–ò–ü –ú–ê–†–®–†–£–¢–ê –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
- –î–ª—è –∫–∞–∫–∏—Ö –≤–∏–¥–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—Ç —Ä–∞–∑–Ω—ã–µ —É—á–∞—Å—Ç–∫–∏
- –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å–µ–∑–æ–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
- –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –ø—Ä–æ—Ç—è–∂–µ–Ω–Ω–æ—Å—Ç–∏

4. –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –û–°–û–ë–ï–ù–ù–û–°–¢–ò
- –ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö
- –û—Ü–µ–Ω–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (–æ—Å–æ–±–µ–Ω–Ω–æ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–∞—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤)
- –ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –≤–¥–æ–ª—å –º–∞—Ä—à—Ä—É—Ç–∞

5. –≠–ö–ò–ü–ò–†–û–í–ö–ê –ò –ü–û–î–ì–û–¢–û–í–ö–ê
- –ù–µ–æ–±—Ö–æ–¥–∏–º–æ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏
- –¢—Ä–µ–±—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–ª—è –º–Ω–æ–≥–æ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤

6. –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ï –†–ò–°–ö–ò –ò –û–°–û–ë–ï–ù–ù–û–°–¢–ò
- –û–ø–∞—Å–Ω—ã–µ —É—á–∞—Å—Ç–∫–∏ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ (—É—á–∏—Ç—ã–≤–∞—è —Ä–∞–∑–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã)
- –ú–µ—Ç–µ–æ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–∫–∞
- –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –º–µ—Å—Ç–Ω–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –ª–æ–≥–∏—Å—Ç–∏–∫–∏

7. –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
- –°–æ–≤–µ—Ç—ã –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –º–Ω–æ–≥–æ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–∫–∫–ª–∏–º–∞—Ç–∏–∑–∞—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ–ø–∞–¥—ã –≤—ã—Å–æ—Ç)
- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ, –Ω–æ—á–ª–µ–≥–µ, –≤–æ–¥–µ –≤–¥–æ–ª—å –º–∞—Ä—à—Ä—É—Ç–∞

–û–°–û–ë–û–ï –í–ù–ò–ú–ê–ù–ò–ï: –º–∞—Ä—à—Ä—É—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ ${geographicContext.multiRegion ? '–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–≥–∏–æ–Ω–æ–≤' : '–æ–¥–∏–Ω —Ä–µ–≥–∏–æ–Ω'} - —É—á—Ç–∏ —ç—Ç–æ –≤ –∞–Ω–∞–ª–∏–∑–µ!
–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–º, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏ —É—á–∏—Ç—ã–≤–∞—Ç—å –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤.
    `;

    console.log('ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò —Å –∞–Ω–∞–ª–∏–∑–æ–º –≤—Å–µ—Ö —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞...');
    
    const response = await axios.post(
      'https://openrouter.ai/api/v1/chat/completions',
      {
        model: 'deepseek/deepseek-chat',
        messages: [{ role: 'user', content: prompt }],
        max_tokens: 2500,
        temperature: 0.7
      },
      {
        headers: {
          'Authorization': `Bearer ${process.env.OPENROUTER_API_KEY}`,
          'HTTP-Referer': 'http://localhost:5173',
          'X-Title': 'Route Safety Planner'
        }
      }
    );

    const analysis = response.data.choices[0].message.content.trim();
    console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ –æ—Ç –ò–ò –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    
    res.json({ 
      analysis,
      stats: routeAnalysis,
      terrainType: terrainType,
      geographicContext: geographicContext,
      formattedGeoContext: formattedGeoContext
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ä—à—Ä—É—Ç–∞:', error.message);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç' });
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞
function analyzeRouteGeometry(coordinates, elevationData) {
  if (!coordinates || coordinates.length < 2) {
    return {
      avgSlope: 0,
      maxSlope: 0,
      steepSections: 0,
      sinuosity: 0,
      minElevation: 0,
      maxElevation: 0,
      elevationProfile: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö'
    };
  }

  let totalSlope = 0;
  let maxSlope = 0;
  let steepSections = 0;
  let totalDistance = 0;

  for (let i = 1; i < coordinates.length; i++) {
    const prev = coordinates[i - 1];
    const curr = coordinates[i];
    
    const distance = calculateDistance(prev[0], prev[1], curr[0], curr[1]);
    totalDistance += distance;
    
    if (elevationData && elevationData.length > i) {
      const elevationDiff = elevationData[i] - elevationData[i - 1];
      const slope = (elevationDiff / distance) * 100;
      
      totalSlope += Math.abs(slope);
      maxSlope = Math.max(maxSlope, Math.abs(slope));
      
      if (Math.abs(slope) > 15) {
        steepSections++;
      }
    }
  }

  const straightLineDistance = calculateDistance(
    coordinates[0][0], coordinates[0][1],
    coordinates[coordinates.length - 1][0], coordinates[coordinates.length - 1][1]
  );
  
  const sinuosity = totalDistance / straightLineDistance;

  let elevationProfile = '–†–∞–≤–Ω–∏–Ω–Ω—ã–π';
  if (elevationData) {
    const elevationRange = Math.max(...elevationData) - Math.min(...elevationData);
    if (elevationRange > 1000) elevationProfile = '–ì–æ—Ä–Ω—ã–π';
    else if (elevationRange > 500) elevationProfile = '–•–æ–ª–º–∏—Å—Ç—ã–π';
    else if (elevationRange > 200) elevationProfile = '–ü–µ—Ä–µ—Å–µ—á–µ–Ω–Ω—ã–π';
  }

  return {
    avgSlope: totalDistance > 0 ? totalSlope / (coordinates.length - 1) : 0,
    maxSlope,
    steepSections,
    sinuosity,
    minElevation: elevationData ? Math.min(...elevationData) : 0,
    maxElevation: elevationData ? Math.max(...elevationData) : 0,
    elevationProfile
  };
}

const PORT = 3001;
app.listen(PORT, () => {
  console.log(`–ë—ç–∫–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});