import { LatLngTuple, GeographicLocation, GeographicContext } from '../types';
import axios from 'axios';

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –≤ –º–µ—Ç—Ä–∞—Ö
 */
export function calculateDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {
  const R = 6371000; // —Ä–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
  const dLat = (lat2 - lat1) * Math.PI / 180;
  const dLon = (lon2 - lon1) * Math.PI / 180;
  const a = 
    Math.sin(dLat/2) * Math.sin(dLat/2) +
    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * 
    Math.sin(dLon/2) * Math.sin(dLon/2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  return R * c;
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –º–µ—Å—Ç–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ –≤—ã—Å–æ—Ç
 */
export function determineTerrainType(coordinates: LatLngTuple[], elevationData: number[]): string {
  if (!coordinates || !elevationData || coordinates.length < 2) {
    return '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  }

  const minElevation = Math.min(...elevationData);
  const maxElevation = Math.max(...elevationData);
  const elevationRange = maxElevation - minElevation;
  const avgElevation = elevationData.reduce((sum, elev) => sum + elev, 0) / elevationData.length;

  let totalSlope = 0;
  let maxSlope = 0;
  
  for (let i = 1; i < coordinates.length; i++) {
    const prev = coordinates[i - 1];
    const curr = coordinates[i];
    const distance = calculateDistance(prev[0], prev[1], curr[0], curr[1]);
    
    if (distance > 0 && i < elevationData.length) {
      const elevationDiff = elevationData[i] - elevationData[i - 1];
      const slope = (elevationDiff / distance) * 100;
      totalSlope += Math.abs(slope);
      maxSlope = Math.max(maxSlope, Math.abs(slope));
    }
  }

  const avgSlope = totalSlope / (coordinates.length - 1);

  if (elevationRange > 1000) {
    return '–≥–æ—Ä–Ω–∞—è –º–µ—Å—Ç–Ω–æ—Å—Ç—å';
  } else if (elevationRange > 500) {
    return '—Ö–æ–ª–º–∏—Å—Ç–∞—è –º–µ—Å—Ç–Ω–æ—Å—Ç—å';
  } else if (elevationRange > 200) {
    return '–ø–µ—Ä–µ—Å–µ—á–µ–Ω–Ω–∞—è –º–µ—Å—Ç–Ω–æ—Å—Ç—å';
  } else if (avgSlope > 8) {
    return '–≤–æ–ª–Ω–∏—Å—Ç–∞—è —Ä–∞–≤–Ω–∏–Ω–∞';
  } else if (avgElevation < 50) {
    return '–Ω–∏–∑–º–µ–Ω–Ω–æ—Å—Ç—å';
  } else if (avgElevation > 500) {
    return '–≤–æ–∑–≤—ã—à–µ–Ω–Ω–æ—Å—Ç—å';
  } else {
    return '—Ä–∞–≤–Ω–∏–Ω–Ω–∞—è –º–µ—Å—Ç–Ω–æ—Å—Ç—å';
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ –≤—Å–µ–º —Ç–æ—á–∫–∞–º –º–∞—Ä—à—Ä—É—Ç–∞
 */
export async function getGeographicContext(coordinates: LatLngTuple[]): Promise<GeographicContext> {
  try {
    // –í—ã–±–∏—Ä–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö —Ç–æ—á–µ–∫ –≤–¥–æ–ª—å –º–∞—Ä—à—Ä—É—Ç–∞
    const samplePoints: LatLngTuple[] = [];
    const step = Math.max(1, Math.floor(coordinates.length / 5)); // –ë–µ—Ä–µ–º 5 —Ç–æ—á–µ–∫ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ
    
    for (let i = 0; i < coordinates.length; i += step) {
      if (samplePoints.length < 5) { // –ú–∞–∫—Å–∏–º—É–º 5 —Ç–æ—á–µ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        samplePoints.push(coordinates[i]);
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∏ –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫–∏
    if (coordinates.length > 0) {
      samplePoints.push(coordinates[0]);
      samplePoints.push(coordinates[coordinates.length - 1]);
    }

    const uniquePoints = Array.from(new Set(samplePoints.map(p => p.join(','))))
      .map(str => str.split(',').map(Number)) as LatLngTuple[];

    console.log(`üåç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ${uniquePoints.length} —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤`);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ç–æ—á–∫—É
    const locationPromises = uniquePoints.map(async (point, index) => {
      try {
        await new Promise(resolve => setTimeout(resolve, index * 200)); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        const response = await axios.get(
          `https://nominatim.openstreetmap.org/reverse?format=json&lat=${point[0]}&lon=${point[1]}&zoom=8&accept-language=ru`,
          {
            headers: {
              'User-Agent': 'RouteSafetyPlanner/1.0'
            }
          }
        );

        const data = response.data;
        if (data && data.address) {
          return {
            point: point,
            country: data.address.country || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            region: data.address.state || data.address.region || data.address.province || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            area: data.address.county || data.address.district || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            locality: data.address.city || data.address.town || data.address.village || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            type: data.addresstype || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
          } as GeographicLocation;
        }
      } catch (error) {
        console.log(`–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ—á–∫–∏ ${index}:`, (error as Error).message);
      }
      return null;
    });

    const locations = (await Promise.all(locationPromises)).filter((loc): loc is GeographicLocation => loc !== null);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –≤—Å–µ–º —Ç–æ—á–∫–∞–º
    const countries = new Set<string>();
    const regions = new Set<string>();
    const areas = new Set<string>();
    const localities = new Set<string>();

    locations.forEach(loc => {
      if (loc.country !== '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') countries.add(loc.country);
      if (loc.region !== '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') regions.add(loc.region);
      if (loc.area !== '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') areas.add(loc.area);
      if (loc.locality !== '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') localities.add(loc.locality);
    });

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø—Ä–æ—Ö–æ–¥–∏—Ç –ª–∏ –º–∞—Ä—à—Ä—É—Ç —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–≥–∏–æ–Ω–æ–≤
    const multiRegion = regions.size > 1;
    const multiCountry = countries.size > 1;

    return {
      countries: Array.from(countries),
      regions: Array.from(regions),
      areas: Array.from(areas),
      localities: Array.from(localities),
      multiRegion: multiRegion,
      multiCountry: multiCountry,
      totalPointsAnalyzed: locations.length
    };

  } catch (error) {
    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:', (error as Error).message);
    return {
      countries: ['–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'],
      regions: ['–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'],
      areas: ['–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'],
      localities: ['–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'],
      multiRegion: false,
      multiCountry: false,
      totalPointsAnalyzed: 0
    };
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–∏–¥
 */
export function formatGeographicContext(context: GeographicContext): string {
  if (context.countries[0] === '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') {
    return '–≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ';
  }

  let description = '';

  if (context.multiCountry) {
    description = `–ú–∞—Ä—à—Ä—É—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω: ${context.countries.join(', ')}. `;
  } else {
    description = `–°—Ç—Ä–∞–Ω–∞: ${context.countries[0]}. `;
  }

  if (context.multiRegion) {
    description += `–ü—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ —Ä–µ–≥–∏–æ–Ω—ã: ${context.regions.join(', ')}. `;
  } else if (context.regions.length > 0) {
    description += `–†–µ–≥–∏–æ–Ω: ${context.regions[0]}. `;
  }

  if (context.areas.length > 0) {
    description += `–†–∞–π–æ–Ω—ã: ${context.areas.join(', ')}. `;
  }

  if (context.localities.length > 0) {
    if (context.localities.length > 3) {
      description += `–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã: ${context.localities.slice(0, 3).join(', ')} –∏ –µ—â–µ ${context.localities.length - 3}. `;
    } else {
      description += `–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã: ${context.localities.join(', ')}. `;
    }
  }

  return description;
}
