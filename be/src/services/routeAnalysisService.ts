import { RouteAnalysisRequest, RouteAnalysisResponse, DailyRoute, DailyWeather } from '../types';
import { determineTerrainType, getGeographicContext, formatGeographicContext } from '../helpers/geography';
import { analyzeRouteGeometry } from '../helpers/routeAnalysis';
import { generateAnalysisPrompt, analyzeRouteWithAI } from '../helpers/aiAnalysis';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤
 */
export class RouteAnalysisService {
  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–∞—Ä—à—Ä—É—Ç–∞
   */
  async analyzeRoute(request: RouteAnalysisRequest): Promise<RouteAnalysisResponse> {
    try {
      console.log('üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ä—à—Ä—É—Ç–∞:');
      console.log(`- –î–ª–∏–Ω–∞: ${request.lengthKm} –∫–º (${request.lengthMeters} –º)`);
      console.log(`- –ù–∞–±–æ—Ä –≤—ã—Å–æ—Ç—ã: ${request.elevationGain} –º`);
      console.log(`- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫: ${request.coordinates?.length || 0}`);

      if (request.elevationData && request.elevationData.length > 0) {
        console.log('- –î–∏–∞–ø–∞–∑–æ–Ω –≤—ã—Å–æ—Ç:', Math.min(...request.elevationData), '-', Math.max(...request.elevationData), '–º');
      }

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ—Å—Ç–Ω–æ—Å—Ç–∏
      const terrainType = determineTerrainType(request.coordinates, request.elevationData);
      console.log(`- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø –º–µ—Å—Ç–Ω–æ—Å—Ç–∏: ${terrainType}`);

      // –ü–æ–ª—É—á–∞–µ–º –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ –≤—Å–µ–º —Ç–æ—á–∫–∞–º
      const geographicContext = await getGeographicContext(request.coordinates);
      console.log('- –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:', geographicContext);

      const formattedGeoContext = formatGeographicContext(geographicContext);
      console.log('- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:', formattedGeoContext);

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –º–∞—Ä—à—Ä—É—Ç–∞
      const routeAnalysis = analyzeRouteGeometry(request.coordinates, request.elevationData);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –ò–ò
      const prompt = generateAnalysisPrompt(
        request,
        terrainType,
        geographicContext,
        formattedGeoContext,
        routeAnalysis
      );

      // –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –æ—Ç –ò–ò
      const analysis = await analyzeRouteWithAI(prompt);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–Ω—è—Ö –ø–æ—Ö–æ–¥–∞
      const dailyRoutes = this.generateDailyRoutes(request, routeAnalysis);
      
      return { 
        analysis,
        stats: routeAnalysis,
        terrainType: terrainType,
        geographicContext: geographicContext,
        formattedGeoContext: formattedGeoContext,
        dailyRoutes: dailyRoutes,
        totalDays: dailyRoutes.length
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ä—à—Ä—É—Ç–∞:', (error as Error).message);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç');
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –¥–Ω—è—Ö –ø–æ—Ö–æ–¥–∞
   */
  private generateDailyRoutes(request: RouteAnalysisRequest, routeAnalysis: any): DailyRoute[] {
    const startDate = new Date(request.startDate);
    const endDate = new Date(request.endDate);
    const totalDays = Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24)) + 1;
    
    const dailyRoutes: DailyRoute[] = [];
    const dailyDistance = request.lengthKm / totalDays;
    const dailyElevationGain = request.elevationGain / totalDays;

    for (let i = 0; i < totalDays; i++) {
      const currentDate = new Date(startDate);
      currentDate.setDate(startDate.getDate() + i);
      
      const weather = this.generateWeatherForecast(currentDate, request.coordinates[0]);
      
      dailyRoutes.push({
        day: i + 1,
        date: currentDate.toISOString().split('T')[0],
        distance: Math.round(dailyDistance * 100) / 100,
        elevationGain: Math.round(dailyElevationGain),
        description: this.generateDayDescription(i + 1, totalDays, request.tourismType),
        weather: weather,
        recommendations: this.generateDayRecommendations(i + 1, request.tourismType, weather)
      });
    }

    return dailyRoutes;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –¥–Ω—è
   */
  private generateWeatherForecast(date: Date, coordinates: [number, number]): DailyWeather {
    // –ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–≥–æ–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ –¥–∞—Ç—ã
    const month = date.getMonth();
    const lat = coordinates[0];
    
    // –ë–∞–∑–æ–≤—ã–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —à–∏—Ä–æ—Ç—ã –∏ –º–µ—Å—è—Ü–∞
    let baseTemp = 20;
    if (lat > 60) baseTemp = 5; // –°–µ–≤–µ—Ä–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã
    else if (lat > 45) baseTemp = 15; // –°—Ä–µ–¥–Ω–∏–µ —à–∏—Ä–æ—Ç—ã
    else if (lat > 30) baseTemp = 25; // –Æ–∂–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã
    
    // –°–µ–∑–æ–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
    if (month >= 11 || month <= 2) baseTemp -= 15; // –ó–∏–º–∞
    else if (month >= 3 && month <= 5) baseTemp += 5; // –í–µ—Å–Ω–∞
    else if (month >= 6 && month <= 8) baseTemp += 10; // –õ–µ—Ç–æ
    else baseTemp -= 5; // –û—Å–µ–Ω—å

    const minTemp = baseTemp - 5 + Math.random() * 10;
    const maxTemp = baseTemp + 5 + Math.random() * 10;
    
    const conditions = ['–Ø—Å–Ω–æ', '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å', '–û–±–ª–∞—á–Ω–æ', '–î–æ–∂–¥—å', '–°–Ω–µ–≥'][Math.floor(Math.random() * 5)];
    const precipitation = conditions === '–î–æ–∂–¥—å' ? Math.random() * 20 : Math.random() * 5;
    const windSpeed = Math.random() * 15;

    return {
      date: date.toISOString().split('T')[0],
      temperature: {
        min: Math.round(minTemp),
        max: Math.round(maxTemp)
      },
      conditions: conditions,
      precipitation: Math.round(precipitation * 10) / 10,
      windSpeed: Math.round(windSpeed * 10) / 10,
      description: `${conditions}, ${Math.round(minTemp)}¬∞C - ${Math.round(maxTemp)}¬∞C`
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –¥–Ω—è
   */
  private generateDayDescription(day: number, totalDays: number, tourismType: string): string {
    const descriptions = {
      '–ø–µ—à–∏–π': `–î–µ–Ω—å ${day} –ø–µ—à–µ–≥–æ –ø–æ—Ö–æ–¥–∞. ${day === 1 ? '–ù–∞—á–∞–ª–æ –º–∞—Ä—à—Ä—É—Ç–∞' : day === totalDays ? '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ—Ö–æ–¥–∞' : '–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞'}.`,
      '–≤–µ–ª–æ—Å–∏–ø–µ–¥–Ω—ã–π': `–î–µ–Ω—å ${day} –≤–µ–ª–æ–ø–æ—Ö–æ–¥–∞. ${day === 1 ? '–°—Ç–∞—Ä—Ç –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ' : day === totalDays ? '–§–∏–Ω–∏—à –ø–æ—Ö–æ–¥–∞' : '–í–µ–ª–æ–ø–µ—Ä–µ—Ö–æ–¥'}.`,
      '–≤–æ–¥–Ω—ã–π': `–î–µ–Ω—å ${day} –≤–æ–¥–Ω–æ–≥–æ –ø–æ—Ö–æ–¥–∞. ${day === 1 ? '–°–ø—É—Å–∫ –Ω–∞ –≤–æ–¥—É' : day === totalDays ? '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–ø–ª–∞–≤–∞' : '–°–ø–ª–∞–≤ –ø–æ —Ä–µ–∫–µ'}.`,
      '–≥–æ—Ä–Ω—ã–π': `–î–µ–Ω—å ${day} –≥–æ—Ä–Ω–æ–≥–æ –ø–æ—Ö–æ–¥–∞. ${day === 1 ? '–í—ã—Ö–æ–¥ –≤ –≥–æ—Ä—ã' : day === totalDays ? '–°–ø—É—Å–∫ —Å –≥–æ—Ä' : '–ì–æ—Ä–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥'}.`,
      '–ª—ã–∂–Ω—ã–π': `–î–µ–Ω—å ${day} –ª—ã–∂–Ω–æ–≥–æ –ø–æ—Ö–æ–¥–∞. ${day === 1 ? '–ù–∞—á–∞–ª–æ –ª—ã–∂–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞' : day === totalDays ? '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ª—ã–∂–Ω–æ–≥–æ –ø–æ—Ö–æ–¥–∞' : '–õ—ã–∂–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥'}.`,
      '–∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π': `–î–µ–Ω—å ${day} –∞–≤—Ç–æ–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è. ${day === 1 ? '–ù–∞—á–∞–ª–æ –∞–≤—Ç–æ–ø—Ä–æ–±–µ–≥–∞' : day === totalDays ? '–§–∏–Ω–∏—à –∞–≤—Ç–æ–ø—Ä–æ–±–µ–≥–∞' : '–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥'}.`,
      '–≤–æ–∑–¥—É—à–Ω—ã–π': `–î–µ–Ω—å ${day} –≤–æ–∑–¥—É—à–Ω–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è. ${day === 1 ? '–ü–µ—Ä–≤—ã–π –ø–æ–ª–µ—Ç' : day === totalDays ? '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–ª–µ—Ç–æ–≤' : '–ü–æ–ª–µ—Ç–Ω—ã–π –¥–µ–Ω—å'}.`,
      '–º–æ—Ç–æ': `–î–µ–Ω—å ${day} –º–æ—Ç–æ–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è. ${day === 1 ? '–°—Ç–∞—Ä—Ç –Ω–∞ –º–æ—Ç–æ—Ü–∏–∫–ª–µ' : day === totalDays ? '–§–∏–Ω–∏—à –º–æ—Ç–æ–ø—Ä–æ–±–µ–≥–∞' : '–ú–æ—Ç–æ—Ü–∏–∫–ª–µ—Ç–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥'}.`
    };
    
    return descriptions[tourismType as keyof typeof descriptions] || `–î–µ–Ω—å ${day} –ø–æ—Ö–æ–¥–∞.`;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–Ω—è
   */
  private generateDayRecommendations(day: number, tourismType: string, weather: DailyWeather): string[] {
    const recommendations: string[] = [];
    
    if (weather.precipitation > 10) {
      recommendations.push('–í–æ–∑—å–º–∏—Ç–µ –¥–æ–∂–¥–µ–≤–∏–∫ –∏ –∑–∞—â–∏—Ç—É –æ—Ç –≤–ª–∞–≥–∏');
    }
    
    if (weather.temperature.min < 0) {
      recommendations.push('–û–¥–µ–≤–∞–π—Ç–µ—Å—å —Ç–µ–ø–ª–æ, –≤–æ–∑–º–æ–∂–Ω—ã –∑–∞–º–æ—Ä–æ–∑–∫–∏');
    }
    
    if (weather.windSpeed > 10) {
      recommendations.push('–û—Å—Ç–æ—Ä–æ–∂–Ω–æ —Å –≤–µ—Ç—Ä–æ–º, –æ—Å–æ–±–µ–Ω–Ω–æ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —É—á–∞—Å—Ç–∫–∞—Ö');
    }
    
    if (tourismType === '–≤–æ–¥–Ω—ã–π' && weather.windSpeed > 8) {
      recommendations.push('–°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä - –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –Ω–∞ –≤–æ–¥–µ');
    }
    
    if (tourismType === '–≤–µ–ª–æ—Å–∏–ø–µ–¥–Ω—ã–π' && weather.precipitation > 5) {
      recommendations.push('–ú–æ–∫—Ä–∞—è –¥–æ—Ä–æ–≥–∞ - —Å–Ω–∏–∑—å—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å');
    }
    
    if (tourismType === '–∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π' && weather.precipitation > 10) {
      recommendations.push('–î–æ–∂–¥—å - –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –Ω–∞ –¥–æ—Ä–æ–≥–µ, —Å–Ω–∏–∑—å—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å');
    }
    
    if (tourismType === '–∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π' && weather.windSpeed > 15) {
      recommendations.push('–°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä - –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ —Å –±–æ–∫–æ–≤—ã–º –≤–µ—Ç—Ä–æ–º');
    }
    
    if (tourismType === '–º–æ—Ç–æ' && weather.precipitation > 5) {
      recommendations.push('–î–æ–∂–¥—å - –Ω–∞–¥–µ–Ω—å—Ç–µ –¥–æ–∂–¥–µ–≤–∏–∫, –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –Ω–∞ –º–æ–∫—Ä–æ–π –¥–æ—Ä–æ–≥–µ');
    }
    
    if (tourismType === '–º–æ—Ç–æ' && weather.windSpeed > 12) {
      recommendations.push('–°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä - –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã —Å –±–æ–∫–æ–≤—ã–º –≤–µ—Ç—Ä–æ–º –Ω–∞ –º–æ—Ç–æ—Ü–∏–∫–ª–µ');
    }
    
    if (tourismType === '–≤–æ–∑–¥—É—à–Ω—ã–π' && weather.windSpeed > 20) {
      recommendations.push('–°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä - –≤–æ–∑–º–æ–∂–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –ø–æ–ª–µ—Ç—ã');
    }
    
    if (tourismType === '–≤–æ–∑–¥—É—à–Ω—ã–π' && weather.precipitation > 15) {
      recommendations.push('–û—Å–∞–¥–∫–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –º–µ—Ç–µ–æ—É—Å–ª–æ–≤–∏—è –¥–ª—è –ø–æ–ª–µ—Ç–æ–≤');
    }
    
    if (day === 1) {
      recommendations.push('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º');
    }
    
    return recommendations;
  }
}
