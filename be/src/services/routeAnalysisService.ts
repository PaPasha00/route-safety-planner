import { RouteAnalysisRequest, RouteAnalysisResponse } from '../types';
import { determineTerrainType, getGeographicContext, formatGeographicContext } from '../helpers/geography';
import { analyzeRouteGeometry } from '../helpers/routeAnalysis';
import { generateAnalysisPrompt, analyzeRouteWithAI } from '../helpers/aiAnalysis';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤
 */
export class RouteAnalysisService {
  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–∞—Ä—à—Ä—É—Ç–∞
   */
  async analyzeRoute(request: RouteAnalysisRequest): Promise<RouteAnalysisResponse> {
    try {
      console.log('üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ä—à—Ä—É—Ç–∞:');
      console.log(`- –î–ª–∏–Ω–∞: ${request.lengthKm} –∫–º (${request.lengthMeters} –º)`);
      console.log(`- –ù–∞–±–æ—Ä –≤—ã—Å–æ—Ç—ã: ${request.elevationGain} –º`);
      console.log(`- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫: ${request.coordinates?.length || 0}`);

      if (request.elevationData && request.elevationData.length > 0) {
        console.log('- –î–∏–∞–ø–∞–∑–æ–Ω –≤—ã—Å–æ—Ç:', Math.min(...request.elevationData), '-', Math.max(...request.elevationData), '–º');
      }

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ—Å—Ç–Ω–æ—Å—Ç–∏
      const terrainType = determineTerrainType(request.coordinates, request.elevationData);
      console.log(`- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø –º–µ—Å—Ç–Ω–æ—Å—Ç–∏: ${terrainType}`);

      // –ü–æ–ª—É—á–∞–µ–º –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ –≤—Å–µ–º —Ç–æ—á–∫–∞–º
      const geographicContext = await getGeographicContext(request.coordinates);
      console.log('- –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:', geographicContext);

      const formattedGeoContext = formatGeographicContext(geographicContext);
      console.log('- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:', formattedGeoContext);

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –º–∞—Ä—à—Ä—É—Ç–∞
      const routeAnalysis = analyzeRouteGeometry(request.coordinates, request.elevationData);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –ò–ò
      const prompt = generateAnalysisPrompt(
        request,
        terrainType,
        geographicContext,
        formattedGeoContext,
        routeAnalysis
      );

      // –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –æ—Ç –ò–ò
      const analysis = await analyzeRouteWithAI(prompt);
      
      return { 
        analysis,
        stats: routeAnalysis,
        terrainType: terrainType,
        geographicContext: geographicContext,
        formattedGeoContext: formattedGeoContext
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ä—à—Ä—É—Ç–∞:', (error as Error).message);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç');
    }
  }
}
