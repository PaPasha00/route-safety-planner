// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –≤—ã—Å–æ—Ç –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö
const fetch = require('node-fetch');

const testLocations = [
  { name: '–≠–≤–µ—Ä–µ—Å—Ç', coords: [27.9881, 86.9250] },
  { name: '–ú–æ—Å–∫–≤–∞', coords: [55.7558, 37.6176] },
  { name: '–ê–ª—å–ø—ã (–ú–æ–Ω–±–ª–∞–Ω)', coords: [45.8326, 6.8652] },
  { name: '–ö–∞–≤–∫–∞–∑ (–≠–ª—å–±—Ä—É—Å)', coords: [43.3550, 42.4392] },
  { name: '–£—Ä–∞–ª (–ù–∞—Ä–æ–¥–Ω–∞—è)', coords: [65.0333, 60.1167] },
  { name: '–ú–æ—Ä—Å–∫–æ–µ –ø–æ–±–µ—Ä–µ–∂—å–µ', coords: [45.0, 35.0] }
];

async function testElevation(location) {
  try {
    console.log(`\n–¢–µ—Å—Ç–∏—Ä—É–µ–º: ${location.name} (${location.coords[0]}, ${location.coords[1]})`);
    
    const response = await fetch('http://localhost:3001/api/elevation', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ coordinates: [location.coords] })
    });

    if (!response.ok) {
      console.log(`‚ùå HTTP Error: ${response.status}`);
      return;
    }

    const data = await response.json();
    
    if (data.results && data.results.length > 0) {
      const elevation = data.results[0].elevation;
      console.log(`‚úÖ –í—ã—Å–æ—Ç–∞: ${elevation}–º`);
      
      if (elevation > 0) {
        console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ`);
      } else {
        console.log(`‚ö†Ô∏è  –í—ã—Å–æ—Ç–∞ —Ä–∞–≤–Ω–∞ 0 - –≤–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –¥–∞–Ω–Ω—ã–º–∏`);
      }
    } else {
      console.log(`‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤—ã—Å–æ—Ç–µ`);
    }
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
}

async function runTests() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Å–æ—Ç –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö...');
  console.log('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:3001');
  
  for (const location of testLocations) {
    await testElevation(location);
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}

runTests().catch(console.error);
